// Transaction Form Translations
const formTranslations = {
    en: {
        // Wizard steps
        'step1': 'Basic Information',
        'step2': 'Assignment & Schedule',
        'step3': 'Attachments',
        'step4': 'Review & Submit',
        
        // Section headers
        'basicInfo': 'Basic Transaction Information',
        'assignment': 'Assignment & Scheduling',
        'uploadAttach': 'Upload Attachments',
        'reviewDetails': 'Review Transaction Details',
        
        // Form labels
        'transactionTitle': 'Transaction Title',
        'externalRef': 'External Reference ID',
        'description': 'Description',
        'clientName': 'Client Name',
        'priority': 'Priority',
        'transactionType': 'Transaction Type',
        'category': 'Category',
        'assignTo': 'Assign To',
        'dueDate': 'Due Date',
        'projectId': 'Project ID',
        'department': 'Department',
        'tags': 'Tags',
        'internalNotes': 'Internal Notes',
        
        // Placeholders
        'enterTitle': 'Enter transaction title',
        'enterExtRef': 'e.g., REF-2024-XXXX',
        'enterDescription': 'Enter detailed description of the transaction',
        'enterClientName': 'Enter client name',
        'enterProjectId': 'Enter project ID (optional)',
        'enterTags': 'Enter tags separated by commas (e.g., urgent, review, phase-2)',
        'enterNotes': 'Enter internal notes (not visible to clients)',
        
        // Options
        'selectType': 'Select type',
        'selectCategory': 'Select category',
        'selectEditor': 'Select editor',
        'selectDepartment': 'Select department',
        
        // Priority options
        'low': 'Low',
        'normal': 'Normal',
        'high': 'High',
        'urgent': 'Urgent',
        
        // Type options
        'documentReview': 'Document Review',
        'approvalRequest': 'Approval Request',
        'submission': 'Submission',
        'informationRequest': 'Information Request',
        'statusUpdate': 'Status Update',
        'taskAssignment': 'Task Assignment',
        'reviewCompleted': 'Review Completed',
        
        // Category options
        'architecture': 'Architecture Design',
        'engineering': 'Engineering',
        'construction': 'Construction',
        'planning': 'Planning',
        'consultation': 'Consultation',
        
        // Department options
        'architectureDept': 'Architecture',
        'engineeringDept': 'Engineering',
        'legal': 'Legal',
        'finance': 'Finance',
        'operations': 'Operations',
        
        // File upload
        'dragDrop': 'Drag and drop files here or click to browse',
        'supportedFiles': 'Supported files: PDF, DOC, DOCX, XLS, XLSX, JPG, PNG (Max 10MB per file)',
        'browseFiles': 'Browse Files',
        'makeVisible': 'Make attachments visible to client',
        
        // Summary labels
        'transactionSummary': 'Transaction Summary',
        'transactionId': 'Transaction ID',
        'autoGenerated': 'Auto-generated',
        'title': 'Title',
        'client': 'Client',
        'externalRefId': 'External Reference ID',
        'typeCategory': 'Type / Category',
        'assignedTo': 'Assigned To',
        'attachments': 'Attachments',
        'files': 'files',
        'notProvided': 'Not provided',
        'notAssigned': 'Not assigned',
        'notSet': 'Not set',
        
        // QR Code
        'qrPreview': 'QR Code Preview',
        'autoGeneratedQr': 'Auto-generated QR Code',
        
        // Buttons
        'previous': 'Previous',
        'next': 'Next',
        'saveAsDraft': 'Save as Draft',
        'submitTransaction': 'Submit Transaction',
        
        // Validation
        'pleaseEnterTitle': 'Please enter a transaction title',
        'pleaseEnterClient': 'Please enter client name',
        
        // Auto-save
        'draftSaved': 'Draft saved automatically',
        
        // Helper text
        'tagsHelp': 'Tags help in searching and filtering transactions'
    },
    ar: {
        // Wizard steps
        'step1': 'المعلومات الأساسية',
        'step2': 'التعيين والجدولة',
        'step3': 'المرفقات',
        'step4': 'المراجعة والإرسال',
        
        // Section headers
        'basicInfo': 'معلومات المعاملة الأساسية',
        'assignment': 'التعيين والجدولة',
        'uploadAttach': 'رفع المرفقات',
        'reviewDetails': 'مراجعة تفاصيل المعاملة',
        
        // Form labels
        'transactionTitle': 'عنوان المعاملة',
        'externalRef': 'رقم المرجع الخارجي',
        'description': 'الوصف',
        'clientName': 'اسم العميل',
        'priority': 'الأولوية',
        'transactionType': 'نوع المعاملة',
        'category': 'الفئة',
        'assignTo': 'تعيين إلى',
        'dueDate': 'تاريخ الاستحقاق',
        'projectId': 'رقم المشروع',
        'department': 'القسم',
        'tags': 'العلامات',
        'internalNotes': 'الملاحظات الداخلية',
        
        // Placeholders
        'enterTitle': 'أدخل عنوان المعاملة',
        'enterExtRef': 'مثال: REF-2024-XXXX',
        'enterDescription': 'أدخل وصفاً تفصيلياً للمعاملة',
        'enterClientName': 'أدخل اسم العميل',
        'enterProjectId': 'أدخل رقم المشروع (اختياري)',
        'enterTags': 'أدخل العلامات مفصولة بفواصل (مثال: عاجل, مراجعة, المرحلة-2)',
        'enterNotes': 'أدخل الملاحظات الداخلية (غير مرئية للعملاء)',
        
        // Options
        'selectType': 'اختر النوع',
        'selectCategory': 'اختر الفئة',
        'selectEditor': 'اختر المحرر',
        'selectDepartment': 'اختر القسم',
        
        // Priority options
        'low': 'منخفضة',
        'normal': 'عادية',
        'high': 'عالية',
        'urgent': 'عاجلة',
        
        // Type options
        'documentReview': 'مراجعة مستند',
        'approvalRequest': 'طلب موافقة',
        'submission': 'تقديم',
        'informationRequest': 'طلب معلومات',
        'statusUpdate': 'تحديث الحالة',
        'taskAssignment': 'تعيين مهمة',
        'reviewCompleted': 'اكتمال المراجعة',
        
        // Category options
        'architecture': 'التصميم المعماري',
        'engineering': 'الهندسة',
        'construction': 'البناء',
        'planning': 'التخطيط',
        'consultation': 'الاستشارات',
        
        // Department options
        'architectureDept': 'الهندسة المعمارية',
        'engineeringDept': 'الهندسة',
        'legal': 'القانونية',
        'finance': 'المالية',
        'operations': 'العمليات',
        
        // File upload
        'dragDrop': 'اسحب وأفلت الملفات هنا أو انقر للاستعراض',
        'supportedFiles': 'الملفات المدعومة: PDF, DOC, DOCX, XLS, XLSX, JPG, PNG (الحد الأقصى 10MB لكل ملف)',
        'browseFiles': 'استعراض الملفات',
        'makeVisible': 'جعل المرفقات مرئية للعميل',
        
        // Summary labels
        'transactionSummary': 'ملخص المعاملة',
        'transactionId': 'رقم المعاملة',
        'autoGenerated': 'تلقائي',
        'title': 'العنوان',
        'client': 'العميل',
        'externalRefId': 'رقم المرجع الخارجي',
        'typeCategory': 'النوع / الفئة',
        'assignedTo': 'معيّن إلى',
        'attachments': 'المرفقات',
        'files': 'ملفات',
        'notProvided': 'غير مقدم',
        'notAssigned': 'غير معين',
        'notSet': 'غير محدد',
        
        // QR Code
        'qrPreview': 'معاينة رمز QR',
        'autoGeneratedQr': 'رمز QR تلقائي',
        
        // Buttons
        'previous': 'السابق',
        'next': 'التالي',
        'saveAsDraft': 'حفظ كمسودة',
        'submitTransaction': 'إرسال المعاملة',
        
        // Validation
        'pleaseEnterTitle': 'الرجاء إدخال عنوان المعاملة',
        'pleaseEnterClient': 'الرجاء إدخال اسم العميل',
        
        // Auto-save
        'draftSaved': 'تم حفظ المسودة تلقائياً',
        
        // Helper text
        'tagsHelp': 'تساعد العلامات في البحث والتصفية'
    }
};

// Function to update form language
function updateFormLanguage(lang) {
    const translations = formTranslations[lang] || formTranslations['en'];
    
    // Update wizard steps
    document.querySelectorAll('.wizard-step-label').forEach(label => {
        const key = label.getAttribute('data-key');
        if (key && translations[key]) {
            label.textContent = translations[key];
        }
    });
    
    // Update all elements with data-translate attribute
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (key && translations[key]) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.placeholder = translations[key];
            } else {
                element.textContent = translations[key];
            }
        }
    });
    
    // Update form labels
    document.querySelectorAll('label[data-translate]').forEach(label => {
        const key = label.getAttribute('data-translate');
        if (key && translations[key]) {
            label.textContent = translations[key];
        }
    });
    
    // Update select options
    document.querySelectorAll('option[data-translate]').forEach(option => {
        const key = option.getAttribute('data-translate');
        if (key && translations[key]) {
            option.textContent = translations[key];
        }
    });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    // Get current language from HTML element (already set by inline script)
    const currentLang = document.documentElement.lang || 'en';
    updateFormLanguage(currentLang);
    
    // Update language toggle buttons to reflect current language
    const langButtons = document.querySelectorAll('.language-toggle button');
    langButtons.forEach(btn => {
        const btnLang = btn.getAttribute('data-lang');
        if (btnLang === currentLang) {
            btn.classList.add('active');
        } else {
            btn.classList.remove('active');
        }
    });
    
    // Listen for language toggle clicks
    langButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const newLang = this.getAttribute('data-lang');
            
            // Update HTML attributes
            document.documentElement.lang = newLang;
            document.documentElement.dir = newLang === 'ar' ? 'rtl' : 'ltr';
            
            // Save preference
            localStorage.setItem('language', newLang);
            
            // Update button states
            langButtons.forEach(b => {
                if (b.getAttribute('data-lang') === newLang) {
                    b.classList.add('active');
                } else {
                    b.classList.remove('active');
                }
            });
            
            // Apply translations
            updateFormLanguage(newLang);
        });
    });
});